{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;UC9BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN2B;AAC4C;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iDAAiD,KAAK,GAAG,KAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,kBAAkB,mEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mEAAgB;AAC/B,iBAAiB,mEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,2CAA2C,kCAAkC;AAC7E;AACA;AACA;;AAEA;AACA,eAAe,mEAAgB,qEAAqE;AACpG,iBAAiB,mEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mEAAgB;AACvC,kBAAkB,oEAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,mEAAgB;AACtC,iBAAiB,mEAAgB;AACjC,mBAAmB,mEAAgB;AACnC,gBAAgB,mEAAgB;AAChC,IAAI,qEAAiB;AACrB;AACA,KAAK;AACL,IAAI,qEAAiB;AACrB;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,mEAAgB;AAChC,uBAAuB,mEAAgB;AACvC;AACA,mBAAmB,oBAAoB;AACvC,uBAAuB,oBAAoB;AAC3C,wDAAwD,0BAA0B;AAClF,mBAAmB,gEAAgE;AACnF;AACA;AACA;AACA,IAAI,oEAAiB;AACrB;AACA;;AAEA;AACA,gBAAgB,mEAAgB;AAChC;AACA;;AAEA;AACA,mBAAmB,mEAAgB;AACnC,mBAAmB,oEAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,8DAA8D;AAC9D,4DAA4D;AAC5D,mBAAmB,oBAAoB;AACvC,uBAAuB,oBAAoB;AAC3C;AACA,gCAAgC,IAAI,GAAG;AACvC,uBAAuB,SAAS;AAChC,wBAAwB,SAAS;AACjC,cAAc;AACd;AACA,gCAAgC,IAAI,GAAG;AACvC,uBAAuB,SAAS;AAChC,wBAAwB,SAAS;AACjC,cAAc;AACd;AACA,gCAAgC,IAAI,GAAG;AACvC,uBAAuB,SAAS;AAChC,wBAAwB,SAAS;AACjC,cAAc;AACd;AACA,gCAAgC,IAAI,GAAG;AACvC,uBAAuB,SAAS;AAChC,wBAAwB,SAAS;AACjC,cAAc;AACd;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iCAAiC,gBAAgB;AACjD;AACA,KAAK;AACL;AACA,8BAA8B,gBAAgB;AAC9C,6BAA6B,gBAAgB;AAC7C,KAAK;AACL;AACA;AACA,kCAAkC,gBAAgB;AAClD,iCAAiC,gBAAgB;AACjD;AACA,KAAK;AACL;AACA;AACA,8BAA8B,gBAAgB;AAC9C,6BAA6B,gBAAgB;AAC7C;AACA,CAAC;AACD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC,uBAAuB,oBAAoB;AAC3C,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA;AACA;AACA,sDAAsD,IAAI,GAAG,IAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA,qBAAqB,mEAAgB;AACrC;AACA,uBAAuB,mEAAgB,iBAAiB,QAAQ;AAChE;AACA;AACA,sBAAsB,oCAAoC;AAC1D,sBAAsB,iCAAiC;AACvD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,mEAAgB;AACrC;AACA,uBAAuB,mEAAgB,iBAAiB,QAAQ;;AAEhE,yBAAyB,mEAAgB;AACzC,uBAAuB,mEAAgB;AACvC,gCAAgC;AAChC,sBAAsB,mEAAgB;AACtC;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,oCAAoC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6BAA6B,MAAM,iBAAiB;AAC/G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAgB;AACvC;AACA,qBAAqB,mEAAgB;AACrC,uBAAuB,mEAAgB;AACvC;AACA,yBAAyB,mEAAgB;AACzC,6BAA6B,QAAQ,GAAG,QAAQ;AAChD,uBAAuB,mEAAgB;AACvC,sBAAsB,mEAAgB;AACtC,uBAAuB,mEAAgB;AACvC,mBAAmB,QAAQ;AAC3B,0BAA0B,mEAAgB,wBAAwB,EAAE,GAAG,EAAE;AACzE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;;AAE5D;AACA;AACA;AACA;AACA;AACA,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,IAAI,oEAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAiB;AACzB,6BAA6B,MAAM;AACnC,6BAA6B,eAAe;AAC5C,6BAA6B,eAAe,GAAG,eAAe;AAC9D,6BAA6B,QAAQ;AACrC,6BAA6B,gBAAgB;AAC7C;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4DAA4D,GAAG,GAAG,GAAG;AACrE,2DAA2D,KAAK,GAAG,GAAG;AACtE,8DAA8D,KAAK,GAAG,GAAG;AACzE,4DAA4D,GAAG,GAAG,KAAK;AACvE,6DAA6D,GAAG,GAAG,KAAK;;AAExE;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,mBAAmB,SAAS;AACpC;AACA;AACA;AACA;AACA,QAAQ,oBAAoB,SAAS;AACrC;AACA;AACA;AACA;AACA,QAAQ,mBAAmB,SAAS;AACpC;AACA;AACA;AACA,QAAQ,sDAAsD,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA,QAAQ,oBAAoB,SAAS;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAgB;AACnC,0BAA0B,mEAAgB;AAC1C,wBAAwB,mEAAgB;AACxC;AACA,8BAA8B,mEAAgB;AAC9C;AACA,wBAAwB,mEAAgB;;AAExC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B,sBAAsB,mEAAgB;AACtC;AACA;AACA;AACA,0BAA0B,mEAAgB;AAC1C;AACA;AACA;AACA,0BAA0B,mEAAgB,iBAAiB,UAAU,GAAG,UAAU;AAClF,6BAA6B,mEAAgB;AAC7C,+BAA+B,mEAAgB;AAC/C,+BAA+B,mEAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,2BAA2B,mEAAgB;AAC3C;AACA;AACA,mCAAmC,cAAc,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAgB;AAClC,mBAAmB,gBAAgB;AACnC,uBAAuB,mBAAmB;AAC1C;AACA,gBAAgB,mEAAgB;AAChC,gBAAgB,mEAAgB;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ,IAAI,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B,KAAK,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B,KAAK,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAA8C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,IAAI;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,gBAAgB;AAChG;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,GAAG,IAAI,GAAG,aAAa,GAAG,IAAI,GAAG;AACpF;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,C","sources":["webpack://codejam-q3/./src/style/main.scss?be8e","webpack://codejam-q3/./src/js/mylittlefw.js","webpack://codejam-q3/webpack/bootstrap","webpack://codejam-q3/webpack/runtime/define property getters","webpack://codejam-q3/webpack/runtime/hasOwnProperty shorthand","webpack://codejam-q3/webpack/runtime/make namespace object","webpack://codejam-q3/./src/js/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// Create new element with one string\n// tag_name.class-name.another-class-name.how-many-that-you-need-classes=content\n// For example:\n// div.main-block.red-color.display-none=this is content inside block\nexport function createNewElement(data){\n    let vals = data.split(\"=\")\n    let htmlData = vals[0].split('.')\n    let _contentData = vals.length > 1 ? vals.filter((_, i) => i != 0).join('=') : ''\n    htmlData[0] = htmlData[0].split('').filter(ch => ch != ' ').join('')\n    let _name = htmlData[0] == '' ? 'div' : htmlData[0];\n    let _classList = htmlData.filter((_, i) => i != 0)\n    let element = document.createElement(_name);\n    _classList = _classList.map(it => \n        it.split('').filter(ch => ch != ' ').join('')\n    )\n    _classList.forEach(cls => {element.classList.add(cls)});\n    element.innerHTML = _contentData\n    return element\n}\n//The same, but you can use several args for creating element's array\nexport function createNewElements() {\n    if(arguments.length == 0) return createNewElement('')\n    let args = arguments.length == 1 ? arguments[0] : [...arguments]\n    let resArr = [];\n    args.forEach(data => {\n        resArr.push(\n            createNewElement(data)\n        )\n    })\n    return resArr.length == 1 ? resArr[0] : resArr\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import '../style/main.scss'\nimport {createNewElement, createNewElements} from '../js/mylittlefw.js'\n\nlet gameState = {\n    soundOn: true,\n    easyMode: false,\n    moves: 0,\n    time: 0,\n    isStarted: false,\n    isFinished: true,\n    gameArray: [],\n    size: 4,\n    zeroI: 3,\n    zeroJ: 3,\n    temporaryPause: false,\n\n    movesNode: null,\n    timeNode: null,\n    sizeNode: null,\n\n    setFields(moves, time, size) {\n        this.movesNode = moves\n        this.timeNode = time\n        this.sizeNode = size\n    },\n\n    setMoves(val) {\n        this.movesNode.innerHTML = val\n        this.moves = val\n    },\n    setTime(time) {\n        this.time = time\n        let str = makeTimeStr(time)\n        this.timeNode.innerHTML = str\n    },\n    start(setRandomPosition) {\n        document.querySelector('.start-button').textContent = 'start'\n        blureGame(false)\n        playButton()\n        if (this.isFinished) {\n            this.setNewGameArray()\n            setRandomPosition()\n            this.setTime(0)\n            this.setMoves(0)\n            this.isStarted = true\n            this.temporaryPause = false\n            this.isFinished = false\n        } else {\n            this.isStarted = true\n            this.temporaryPause = false\n        }\n    },\n    stop() {\n        playButton()\n        this.isStarted = false\n        if(!this.isFinished) {\n            blureGame(true)\n            document.querySelector('.start-button').textContent = 'resume'\n        }\n    },\n    setSize(size, refNewSize) {\n        playButton()\n        this.sizeNode.innerHTML = `Frame size: ${size}x${size}`\n        this.size = size\n        this.zeroI = size - 1\n        this.zeroJ = size - 1\n        this.stop()\n        this.setTime(0)\n        this.setMoves(0)\n        this.isFinished = true\n        this.setNewGameArray()\n        document.querySelector('.start-button').textContent = 'start'\n        refNewSize()\n    },\n    setNewGameArray() {\n        let num = 0\n        this.gameArray = []\n        for(let i = 0; i < this.size; i++){\n            this.gameArray.push(new Array(this.size))\n            for(let j = 0; j < this.size; j++) {\n                num++\n                this.gameArray[i][j] = num != this.size**2 ? num : 0\n            }\n        }\n        this.zeroI = this.size - 1\n        this.zeroJ = this.size - 1\n    },\n\n    sowStartMessage() {\n        showMessage('Click \"START\" button before start moving tiles!')\n    },\n\n    moveUp(refreshCorrectBonsPosition, ignoreStart = false){\n        if(!this.isStarted && !ignoreStart) {\n            this.sowStartMessage()\n            return false\n        }\n        if(this.zeroI == this.size - 1) return false\n        playSwitchIt()\n        let movingBone = this.gameArray[this.zeroI + 1][this.zeroJ]\n        this.gameArray[this.zeroI][this.zeroJ] = movingBone\n        this.zeroI++\n        this.gameArray[this.zeroI][this.zeroJ] = 0\n        if(gameState.isStarted) {this.setMoves(this.moves + 1)}\n        refreshCorrectBonsPosition()\n        refreshDrag()\n        return true\n    },\n    moveDown(refreshCorrectBonsPosition, ignoreStart = false){\n        if(!this.isStarted && !ignoreStart) {\n            this.sowStartMessage()\n            return false\n        }\n        if(this.zeroI == 0) return false\n        playSwitchIt()\n        let movingBone = this.gameArray[this.zeroI - 1][this.zeroJ]\n        this.gameArray[this.zeroI][this.zeroJ] = movingBone\n        this.zeroI--\n        this.gameArray[this.zeroI][this.zeroJ] = 0\n        if(gameState.isStarted) {this.setMoves(this.moves + 1)}\n        refreshCorrectBonsPosition()\n        refreshDrag()\n        return true\n    },\n    moveLeft(refreshCorrectBonsPosition, ignoreStart = false){\n        if(!this.isStarted && !ignoreStart) {\n            this.sowStartMessage()\n            return false\n        }\n        if(this.zeroJ == this.size - 1) return false\n        playSwitchIt()\n        let movingBone = this.gameArray[this.zeroI][this.zeroJ + 1]\n        this.gameArray[this.zeroI][this.zeroJ] = movingBone\n        this.zeroJ++\n        this.gameArray[this.zeroI][this.zeroJ] = 0\n        if(gameState.isStarted) {this.setMoves(this.moves + 1)}\n        refreshCorrectBonsPosition()\n        refreshDrag()\n        return true\n    },\n    moveRight(refreshCorrectBonsPosition, ignoreStart = false){\n        if(!this.isStarted && !ignoreStart) {\n            this.sowStartMessage()\n            return false\n        }\n        if(this.zeroJ == 0) return false\n        playSwitchIt()\n        let movingBone = this.gameArray[this.zeroI][this.zeroJ - 1]\n        this.gameArray[this.zeroI][this.zeroJ] = movingBone\n        this.zeroJ--\n        this.gameArray[this.zeroI][this.zeroJ] = 0\n        if(gameState.isStarted) {this.setMoves(this.moves + 1)}\n        refreshCorrectBonsPosition()\n        refreshDrag()\n        return true\n    },\n}\ngameState.setNewGameArray()\n\nlet root = document.body\ncreateGameElement()\n\n\n//CREATE VISUAL\nfunction createGameElement() {\n    let gameDiv = createNewElement('.game-block')\n    createButtonsBlock(gameDiv)\n    createStateBlock(gameDiv)\n    createMainBlock(gameDiv)\n    createSizeBlock(gameDiv)\n    createOtherSizesBlock(gameDiv)\n    createEasyModeButton(gameDiv)\n    createAutofillButton(gameDiv)\n    root.appendChild(gameDiv)\n}\n\nfunction createEasyModeButton(_root) {\n    let text = createNewElement('p.text-to-rev=Эта кнопочка для тестирования, если ее активировать, рандом будет менее злой и можно будет легко и быстро собрать пазл.<br>З.Ы.: Все для удобства ревьювера!')\n    let button = createNewElement('button .up-button .easy-button =Easy mode (off)')\n    _root.appendChild(text)\n    button.onclick = () => {\n        playButton()\n        button.classList.toggle('easy-button_active')\n        gameState.easyMode = !gameState.easyMode\n        button.textContent = `Easy mode (${gameState.easyMode ? 'on' : 'off'})`\n    }\n    _root.appendChild(button)\n}\n\nfunction createAutofillButton(_root) {\n    let text = createNewElement('p.text-to-rev=Ну и бонусом автосборщик, чтобы пазл точно собрался ;)')\n    let button = createNewElement('button .up-button .easy-button =Auto-solution')\n    _root.appendChild(text)\n    button.onclick = () => {\n        playButton()\n        solution()\n    }\n    _root.appendChild(button)\n}\n\nfunction createButtonsBlock(_root) {\n    let _buttonsRoot = createNewElement('.buttons-up-block')\n    let buttons = createNewElements(\n        'button .up-button .start-button =Start',\n        'button .up-button .stop-button =Pause',\n        'button .up-button .save-button =Saves',\n        'button .up-button .results-button =Result',\n        'button .up-button .sound-button'\n    )\n    \n    buttons.forEach(el => _buttonsRoot.appendChild(el))\n    _root.appendChild(_buttonsRoot)\n}\n\nfunction createStateBlock(_root) {\n    let _stateBlock = createNewElement('.state-block')\n    let _moves = createNewElement('.moves-wrapper')\n    let _restart = createNewElement('a.restart-icon')\n    let _time = createNewElement('.time-wrapper')\n    createNewElements('.moves-tittle=Moves:', '.moves-count=0').forEach(el => {\n        _moves.appendChild(el)\n    })\n    createNewElements('.time-tittle=Time:', '.time-count=00:00').forEach(el => {\n        _time.appendChild(el)\n    })\n    _stateBlock.appendChild(_moves)\n    _stateBlock.appendChild(_restart)\n    _stateBlock.appendChild(_time)\n\n    _root.appendChild(_stateBlock)\n}\n\nfunction createMainBlock(_root) {\n    let _game = createNewElement('.game-field')\n    let _gameWrapper = createNewElement('.game-field__wrapper')\n    let bouns = []\n    for(let i = 0; i < gameState.size; i++){\n        for(let j = 0; j < gameState.size; j++) {\n            let str = `.game-field__boun .game-field__${gameState.gameArray[i][j]}=` +\n                `${gameState.gameArray[i][j] != 0 ? gameState.gameArray[i][j] : ''}`\n            bouns.push(str)\n        }\n    }\n    createNewElements(bouns).forEach(elem => _game.appendChild(elem))\n    _root.appendChild(_game)\n}\n\nfunction createSizeBlock(_root) {\n    let _size = createNewElement('.current-size=Frame size: 4x4')\n    _root.appendChild(_size)\n}\n\nfunction createOtherSizesBlock(_root) {\n    let _othSize = createNewElement('.other-size-wrapper')\n    let _content = createNewElements(\n        '.other-size-title=Other sizes: ',\n        'a.other-size-3=3x3',\n        'a.other-size-4=4x4',\n        'a.other-size-5=5x5',\n        'a.other-size-6=6x6',\n        'a.other-size-7=7x7',\n        'a.other-size-8=8x8'\n    )\n    _content.forEach(el => _othSize.appendChild(el))\n    _root.appendChild(_othSize)\n}\n\ngameState.setFields(\n    document.querySelector('.moves-count'),\n    document.querySelector('.time-count'),\n    document.querySelector('.current-size')\n)\n\n//STYLE\nfunction setBonsStyle() {\n    let style = document.createElement('style')\n    // style.type = 'text/css'\n    let steleHD = '@media screen and (min-width: 1280px) {'\n    let stylesMain = ''\n    let stylesTablet = '@media screen and (max-width: 768px) {'\n    let stylePhone = '@media screen and (max-width: 480px) {'\n    for(let i = 0; i < gameState.size; i++){\n        for(let j = 0; j < gameState.size; j++) {\n            stylesMain += \n            `.game-field__pos-${i+1}-${j+1}{\n                top: ${i*65 + 5}px; \n                left: ${j*65 + 5}px;\n            } `\n            stylesTablet += \n            `.game-field__pos-${i+1}-${j+1}{\n                top: ${i*45 + 5}px;\n                left: ${j*45 + 5}px;\n            } `\n            stylePhone +=\n            `.game-field__pos-${i+1}-${j+1}{\n                top: ${i*35 + 5}px;\n                left: ${j*35 + 5}px;\n            } `\n            steleHD +=\n            `.game-field__pos-${i+1}-${j+1}{\n                top: ${i*80 + 5}px;\n                left: ${j*80 + 5}px;\n            } `\n        }\n    }\n    steleHD += `.game-field{\n            height: calc(80px * ${gameState.size} + 5px);\n            width: calc(80px * ${gameState.size} + 5px);\n        }\n    }`\n    stylesMain += `.game-field{\n        height: calc(65px * ${gameState.size} + 5px);\n        width: calc(65px * ${gameState.size} + 5px);\n    }`\n    stylesTablet += `\n        .game-field{\n            height: calc(45px * ${gameState.size} + 5px);\n            width: calc(45px * ${gameState.size} + 5px);\n        }\n    }`\n    stylePhone += `\n    .game-field{\n        height: calc(35px * ${gameState.size} + 5px);\n        width: calc(35px * ${gameState.size} + 5px);\n    }\n}`\n    style.innerHTML = stylesMain + \"\\n\" + steleHD + \"\\n\" + stylesTablet + \"\\n\" + stylePhone\n    document.getElementsByTagName('head')[0].appendChild(style);\n}\nsetBonsStyle()\n\n\n//LOGIC\n//clicks\ndocument.querySelector('.other-size-3').onclick = () => {\n    gameState.setSize(3, refNewSize)\n}\ndocument.querySelector('.other-size-4').onclick = () => {\n    gameState.setSize(4, refNewSize)\n}\ndocument.querySelector('.other-size-5').onclick = () => {\n    gameState.setSize(5, refNewSize)\n}\ndocument.querySelector('.other-size-6').onclick = () => {\n    gameState.setSize(6, refNewSize)\n}\ndocument.querySelector('.other-size-7').onclick = () => {\n    gameState.setSize(7, refNewSize)\n}\ndocument.querySelector('.other-size-8').onclick = () => {\n    gameState.setSize(8, refNewSize)\n}\n\nfunction refreshCorrectBonsPosition() {\n    for(let i = 0; i < gameState.size; i++){\n        for(let j = 0; j < gameState.size; j++) {\n            const className = `.game-field__${gameState.gameArray[i][j]}`\n            const boneNode = document.querySelector(className)\n            boneNode.classList.value = boneNode.classList.value\n                .split(' ')\n                .filter(cls => !cls.includes('__pos'))\n                .join(' ')\n            boneNode.classList.add(`game-field__pos-${i+1}-${j+1}`)\n            boneNode.onclick = null\n            if(i == gameState.zeroI + 1 && j == gameState.zeroJ) {\n                boneNode.onclick = (e) => gameState.moveUp(refreshCorrectBonsPosition)\n            }\n            if(i == gameState.zeroI - 1 && j == gameState.zeroJ) {\n                boneNode.onclick = (e) => gameState.moveDown(refreshCorrectBonsPosition)\n            }\n            if(i == gameState.zeroI && j == gameState.zeroJ + 1) {\n                boneNode.onclick = (e) => gameState.moveLeft(refreshCorrectBonsPosition)\n            }\n            if(i == gameState.zeroI && j == gameState.zeroJ - 1) {\n                boneNode.onclick = (e) => gameState.moveRight(refreshCorrectBonsPosition)\n            }\n        }\n    }\n    isFinishedGame()\n}\n\nfunction refNewSize() {\n    const gameField = document.querySelector('.game-field')\n    gameField.innerHTML = ''\n    setBonsStyle()\n    createMainBlock(gameField)\n    refreshCorrectBonsPosition()\n}\n\nrefreshCorrectBonsPosition()\n\nfunction setRandomPosition(){\n    playShufle()\n    const rndSteps = gameState.easyMode ? 6 //RANDOM TEST\n        : Math.trunc(Math.random()*100+200) * gameState.size\n    for(let k = 0; k < rndSteps; k++){\n        const rngDirection = Math.trunc(Math.random()*4+1)\n        if(rngDirection === 1) gameState.moveUp(refreshCorrectBonsPosition, true)\n        if(rngDirection === 2) gameState.moveDown(refreshCorrectBonsPosition, true)\n        if(rngDirection === 3) gameState.moveLeft(refreshCorrectBonsPosition, true)\n        if(rngDirection === 4) gameState.moveRight(refreshCorrectBonsPosition, true)\n    }\n    if(getFinishedArray()) {setRandomPosition()}\n}\ndocument.querySelector('.start-button').onclick = () => gameState.start(setRandomPosition)\ndocument.querySelector('.stop-button').onclick = () => gameState.stop()\n\n//TIMERs\nsetInterval(() => {\n    if(gameState.isStarted && !gameState.temporaryPause) {\n        gameState.setTime(gameState.time + 1)\n    }\n}, 1000)\n\n\n\nfunction showMessage(message, hideBack = false) {\n    gameState.temporaryPause = true\n    const modalWin = createNewElement(`.win-modal.hiding`)\n    if(hideBack) modalWin.classList.add('win-modal_clear')\n    const winMessage = createNewElement(`.win-message=${message}`)\n    modalWin.appendChild(winMessage)\n    root.appendChild(modalWin)\n    setTimeout(() => {modalWin.classList.remove('hiding')}, 10)\n    setTimeout(() => {modalWin.classList.add('hiding')}, 3000)\n    setTimeout(() => {\n        if(modalWin) root.removeChild(modalWin)\n        if(!hideBack) gameState.temporaryPause = false\n    }, 3600)\n}\nfunction showDialogMessage(message, fun, hideBack = false) {\n    gameState.temporaryPause = true\n    const modalWin = createNewElement(`.win-modal.hiding`)\n    if(hideBack) modalWin.classList.add('win-modal_clear')\n    const winMessage = createNewElement(`.win-message=${message}`)\n\n    const btnContainer = createNewElement('.win-buttons')\n    const btnConfirm = createNewElement('button.win-button.up-button=yes')\n    btnConfirm.onclick = () => {hide(fun)}\n    const btnCancel = createNewElement('button.win-button.up-button=no')\n    btnCancel.onclick = hide\n\n    btnContainer.append(btnCancel, btnConfirm)\n    winMessage.appendChild(btnContainer)\n\n    modalWin.appendChild(winMessage)\n    root.appendChild(modalWin)\n    setTimeout(() => {modalWin.classList.remove('hiding')}, 10)\n\n    function hide(fun) {\n        playButton()\n        modalWin.classList.add('hiding')\n        setTimeout(() => {\n            root.removeChild(modalWin)\n            if(fun) fun()\n            if(!hideBack) gameState.temporaryPause = false\n        }, 600)\n    }\n}\n\nfunction isFinishedGame() {\n    if(!gameState.isStarted) return\n    const isFinish = getFinishedArray()\n    if(isFinish) {\n        playVictory()\n        localStorage.removeItem('gameStr')\n        const winStr = `Hooray! You solved the puzzle in ${makeTimeStr(gameState.time)} and ${gameState.moves} moves!`\n        showMessage(winStr)\n        addNewScore(createScore(gameState.size, gameState.moves, gameState.time))\n        gameState.isFinished = true\n        gameState.stop()\n    }\n}\n\nfunction getFinishedArray() {\n    return gameState.gameArray.flat().reduce((w, c, i) => w && ((c == i + 1) || (c == 0 && i == (gameState.size**2 - 1))), true)\n}\n\n\n//SCORE\n// let score = getScore()\nfunction createScore(size, moves, time) {\n    const date = new Date()\n    return {\n        date: date.toLocaleDateString() + ' ' + date.toLocaleTimeString(),\n        size: size, \n        moves: moves,\n        time: time,\n    }\n}\n\nfunction getScore() {\n    const resScore = localStorage.getItem('score')\n    return resScore ? JSON.parse(resScore) : []\n}\n\nfunction addNewScore(newScore) {\n    let score = getScore()\n    score.push(newScore)\n    localStorage.setItem('score', JSON.stringify(score))\n}\n\ndocument.querySelector('.results-button').onclick = () => displayScore(getScore, gameState.size)\n\nfunction displayScore(getScore, curSize) {\n    if(!gameState.isFinished) {\n        blureGame(true)\n        gameState.temporaryPause = true\n    }\n    playButton()\n    const modalScore = createNewElement(`.win-modal.hiding`)\n    \n    const scoreDiv = createNewElement('.score-block')\n    const scoreClose = createNewElement('.score-block__close')\n    scoreClose.onclick = closeScore\n    const scoreWrapper = createNewElement('.score-block__wrapper')\n    let titleStr = `RESULT ${curSize}x${curSize}`\n    const scoreTitle = createNewElement('.score-block__title='+titleStr)\n    const scoreGrid = createNewElement('.score-block__grid')\n    const scoreLinks = createNewElement('.score-block__links')\n    for(let i = 3; i <= 8; i++) {\n        const scoreLink = createNewElement(`a.score-block__link=${i}x${i}`)\n        if(curSize == i) {\n            scoreLink.classList.add('score-block__link_active')\n        } else {\n            scoreLink.onclick = () => {\n                root.removeChild(modalScore)\n                displayScore(getScore, i)\n            }\n        }\n        scoreLinks.appendChild(scoreLink)\n    }\n\n    createScoreGrid(scoreGrid, getScore, curSize)\n    \n    scoreDiv.appendChild(scoreClose)\n    scoreDiv.appendChild(scoreTitle)\n    scoreWrapper.appendChild(scoreGrid)\n    scoreDiv.appendChild(scoreWrapper)\n    scoreDiv.appendChild(scoreLinks)\n    modalScore.appendChild(scoreDiv)\n    root.appendChild(modalScore)\n    setTimeout(() => {modalScore.classList.remove('hiding')}, 10)\n\n    //close score\n    modalScore.onclick = closeScore\n    function closeScore(e) {\n        playButton()\n        if(e.srcElement == modalScore || e.srcElement == scoreClose) {\n            setTimeout(() => {modalScore.classList.add('hiding')}, 30)\n            setTimeout(() => {\n                root.removeChild(modalScore)\n                if(gameState.isStarted && !gameState.isFinished) blureGame(false)\n                gameState.temporaryPause = false\n            }, 430)\n        }\n    }\n}\n\nfunction createScoreGrid(_root, getScore, curSize) {\n    createNewElements(\n        '.grid-header',\n        '.grid-header=DATE',\n        '.grid-header=SIZE',\n        '.grid-header=TIME',\n        '.grid-header=MOVES',\n    ).forEach(header => _root.appendChild(header))\n    let localScore = getScore()\n    localScore = localScore.sort((a, b) => a.time - b.time).filter(it => it.size == curSize).filter((_, i) => i < 10)\n    localScore.forEach((scoreItem, i) => {\n        const timeStr = makeTimeStr(scoreItem.time)\n        createNewElements(\n            `.grid-element=${i + 1}`,\n            `.grid-element=${scoreItem.date}`,\n            `.grid-element=${scoreItem.size}x${scoreItem.size}`,\n            `.grid-element=${timeStr}`,\n            `.grid-element=${scoreItem.moves}`,\n        ).forEach(elem => _root.appendChild(elem))\n    })\n}\n\nfunction makeTimeStr(time) {\n    const m = Math.trunc(time / 60)\n    const s = Math.trunc(time % 60)\n    return '' + (m > 9 ? m : '0' + m) + ':' + (s > 9 ? s : '0' + s)\n}\n\n//DRAG AND DROP\nrefreshDrag()\nfunction refreshDrag() {\n    document.querySelectorAll('.game-field__boun').forEach(el => {\n        el.setAttribute('draggable', false)\n    })\n    const zi = gameState.zeroI + 1\n    const zj = gameState.zeroJ + 1\n    const zero = document.querySelector(`.game-field__pos-${zi}-${zj}`)\n    const top = document.querySelector(`.game-field__pos-${zi-1}-${zj}`)\n    const bottom = document.querySelector(`.game-field__pos-${zi+1}-${zj}`)\n    const left = document.querySelector(`.game-field__pos-${zi}-${zj-1}`)\n    const right = document.querySelector(`.game-field__pos-${zi}-${zj+1}`)\n\n    let dropMove = 0;\n    \n    zero.ondrop = drop\n    function drop(e) {\n        if(dropMove === 1) {gameState.moveDown(refreshCorrectBonsPosition)}\n        if(dropMove === 2) {gameState.moveUp(refreshCorrectBonsPosition)}\n        if(dropMove === 3) {gameState.moveRight(refreshCorrectBonsPosition)}\n        if(dropMove === 4) {gameState.moveLeft(refreshCorrectBonsPosition)}\n    }\n    zero.ondragover = (e) => { e.preventDefault() }\n\n    new Array(top, bottom, left, right).forEach((el, i) => {\n        if(el) {\n            el.setAttribute('draggable', true)\n            el.ondragstart = (e) => {\n                dropMove = i + 1\n                setTimeout(() => {\n                    el.classList.add('display-none')\n                }, 1);\n            }\n            el.ondrag = (e) => { e.preventDefault() }\n            el.ondragend = (e) => {\n                setTimeout(() => {\n                    el.classList.remove('display-none')\n                    dropMove = 0\n                }, 10);\n            }\n        }\n    })\n}\n\n//SOUND\n\nconst soundButton = new Audio('src/assets/sound/button.mp3')\nconst soundMessage = new Audio('src/assets/sound/message.mp3')\nconst soundShufle = new Audio('src/assets/sound/shufle.mp3')\nconst soundSwitch1 = new Audio('src/assets/sound/switch-1.mp3')\nconst soundSwitch2 = new Audio('src/assets/sound/switch-2.mp3')\nconst soundVictory = new Audio('src/assets/sound/victory.mp3')\n\nlet curSwitch = true\nfunction playButton() {\n    if(!gameState.soundOn) return\n    soundButton.currentTime = 0\n    try{soundButton.play()}catch(e){return}\n}\nfunction playMessage() {\n    if(!gameState.soundOn) return\n    soundMessage.currentTime = 0\n    try{soundMessage.play()}catch(e){return}\n}\nfunction playShufle() {\n    if(!gameState.soundOn) return\n    soundButton.currentTime = 0\n    try{soundShufle.play()}catch(e){return}\n}\nfunction playSwitchIt() {\n    if(!gameState.soundOn) return\n    try{curSwitch ? soundSwitch1.play() : soundSwitch2.play()}catch(e){return}\n    curSwitch = !curSwitch\n}\nfunction playVictory() {\n    if(!gameState.soundOn) return\n    soundButton.currentTime = 0\n    try{soundVictory.play()}catch(e){return}\n}\n\ndocument.querySelector('.sound-button').onclick = function(e) {\n    this.classList.toggle('sound-button_off')\n    gameState.soundOn = !gameState.soundOn\n    playButton()\n    localStorage.setItem('soundOn', gameState.soundOn)\n}\ngameState.soundOn = localStorage.getItem('soundOn') == 'true'\nif(!gameState.soundOn) document.querySelector('.sound-button').classList.toggle('sound-button_off')\n\n//save func\ndocument.querySelector('.save-button').onclick = savePopup\n\nfunction savePopup() {\n    playButton()\n    if(!gameState.isFinished) {\n        blureGame(true)\n        gameState.temporaryPause = true\n    }\n    const _popup = createNewElement('.saves-block')\n    const _popupWrapper = createNewElement('.saves-block__wrapper')\n    const _popupTitle = createNewElement('.saves-block__title=saves')\n    \n    const _popupSlotWrapper = createNewElement('.slots')\n    createSlots(_popupSlotWrapper)\n    const _popupClose = createNewElement('.saves-block__close')\n\n    _popupWrapper.appendChild(_popupClose)\n    _popupWrapper.appendChild(_popupTitle)\n    _popupWrapper.appendChild(_popupSlotWrapper)\n    _popup.appendChild(_popupWrapper)\n    _popup.onclick = (e) => {if(e.target == _popup) closeWindow(_popup)}\n    _popupClose.onclick = () => {closeWindow(_popup)}\n    root.append(_popup)\n}\nfunction closeWindow(win) {\n    if(gameState.isStarted && !gameState.isFinished) blureGame(false)\n    gameState.temporaryPause = false\n    playButton()\n    if(win) root.removeChild(win)\n}\nfunction createSlots(wrapper) {\n    for(let num = 0; num < 4; num++) {\n        const _slot = createNewElement('.slots__slot')\n        let dataLS = localStorage.getItem(\"gameStr_\"+num)\n        if(dataLS) {\n            let data = JSON.parse(dataLS)\n            const _date = createNewElement('.slots__date='\n                +data.date.split('').filter(ch => ch != ',').join('')\n                )\n            const _miniGrid = createMiniGrid(JSON.parse(data.gameArray))\n            const _size = createNewElement(`.slots__size=${data.size}x${data.size}`)\n            const _buttons = createNewElement('.slots__buttons')\n            const _removeBtn = createNewElement('button.slots__remove')\n            const _resaveBtn = createNewElement('button.slots__resave')\n            _buttons.append(_removeBtn, _resaveBtn)\n            _slot.append(_date, _miniGrid, _size, _buttons)\n            _slot.onclick = (e) => {\n                playButton()\n                if (e.target == _removeBtn) {\n                    removeSlot(num, wrapper, createSlots);\n                    return\n                }\n                if (e.target == _resaveBtn) {\n                    resaveToSlot(num, wrapper, createSlots);\n                    return\n                }\n                loadProgress(num)\n            }\n        } else {\n            const _empty = createNewElement('.slots__empty=empty')\n            _slot.classList.add('slots__slot_empty')\n            _slot.appendChild(_empty)\n            _slot.onclick = () => {playButton(); saveToSlot(num); rerender(wrapper, createSlots)}\n        }\n        wrapper.appendChild(_slot)\n    }\n}\nfunction createMiniGrid(arr) {\n    const _grid = createNewElement('.mini-grid.mini-grid_size_'+arr.length)\n    for(let i = 0; i < arr.length; i++){\n        for(let j = 0; j < arr[i].length; j++) {\n            const _item = arr[i][j] != 0 ? \n                createNewElement('.mini-grid__item='+(arr[i][j])) :\n                createNewElement('.mini-grid__item_none')\n            _grid.append(_item)\n        }\n    }\n\n    return _grid\n}\nfunction rerender(wrapper, func) {\n    wrapper.innerHTML = ''\n    func(wrapper)\n}\nfunction removeSlot(num, wrapper, func) {\n    showDialogMessage(\n        'Are you realy want to delete this save?', \n        () => {\n            localStorage.removeItem(\"gameStr_\"+num)\n            rerender(wrapper, func)\n        },\n        true\n    )\n}\nfunction resaveToSlot(num, wrapper, func) {\n    showDialogMessage(\n        'Are you want to rewrite this slot with current game?', \n        () => {\n            saveToSlot(num)\n            rerender(wrapper, func)\n        },\n        true\n    )\n}\nfunction saveToSlot(num) {\n    let gameStr = JSON.stringify(\n        {\n            soundOn: gameState.soundOn,\n            isFinished: gameState.isFinished,\n            moves: gameState.moves,\n            time: gameState.time,\n            size: gameState.size,\n            gameArray: JSON.stringify(gameState.gameArray),\n            zeroI: gameState.zeroI,\n            zeroJ: gameState.zeroJ,\n            isStarted: gameState.isStarted,\n            date: new Date().toLocaleString()\n        }\n    )\n    localStorage.setItem(\"gameStr_\"+num, gameStr)\n    showMessage(`Progress saved to slot #${num+1}!`, true)\n    playMessage()\n}\n\nfunction loadProgress(num) {\n    let res = localStorage.getItem(\"gameStr_\"+num)\n    if(res) {\n        const newGameState = JSON.parse(res)\n        gameState.setSize (newGameState.size, refNewSize)\n        gameState.soundOn = newGameState.soundOn\n        gameState.isFinished = newGameState.isFinished\n        gameState.setMoves(newGameState.moves)\n        gameState.setTime(newGameState.time)\n        gameState.gameArray = JSON.parse(newGameState.gameArray)\n        gameState.zeroI = newGameState.zeroI\n        gameState.zeroJ = newGameState.zeroJ\n        if(newGameState.isStarted) gameState.start(() => {})\n        refreshCorrectBonsPosition()\n        refreshDrag()\n        closeWindow(root.children[1])\n        showMessage(\"Game progress has been loading...\")\n        playMessage()\n    }\n}\n\nsetRandomPosition()\n\n//Restart\ndocument.querySelector('.restart-icon').onclick = () => {\n    gameState.stop()\n    gameState.isFinished = true\n    gameState.setNewGameArray()\n    gameState.start(setRandomPosition)\n}\n\n//blure\nfunction blureGame(isBlure) {\n    document.querySelectorAll('.game-field__boun').forEach(elem => {\n        isBlure ? \n        elem.classList.add('game-field__blure') :\n        elem.classList.remove('game-field__blure')\n    })\n}\n\n//solution\nconst TOP = 'top'\nconst BOTTOM = 'bottom'\nconst LEFT = 'left'\nconst RIGHT = 'right'\n\nconst GAP_TOP = 1\nconst GAP_BOTTOM = 2\nconst GAP_LEFT = 3\nconst GAP_RIGHT = 4\n\nlet flatArr = []\nlet hasSteps = true\nlet countsIsFinish = false\nlet actions = []\nlet actionsLocal = []\nlet arr = []\nlet finalArr = []\n//loadProgress(0)\n\n// solution()\nfunction solution() {\n    countsIsFinish = false\n    solStart()\n}\nvar interval = setInterval(() => {\n    if(!gameState.isStarted) actions = []\n    if(countsIsFinish && gameState.isStarted) nextStep()\n    //if(!hasSteps) clearInterval(interval);\n}, 80);\nfunction nextStep() {\n    let comand = actions.shift()\n    if(comand == LEFT) gameState.moveLeft(refreshCorrectBonsPosition)\n    if(comand == RIGHT) gameState.moveRight(refreshCorrectBonsPosition)\n    if(comand == TOP) gameState.moveUp(refreshCorrectBonsPosition)\n    if(comand == BOTTOM) gameState.moveDown(refreshCorrectBonsPosition)\n    if(actions.length <= 0) hasSteps = false;\n}\ndocument.querySelector('.moves-tittle').onclick = () => {solStartMini; _cursor++}\nlet _cursor = 0\nfunction solStartMini() {\n    console.log(_cursor)\n    if(_cursor == 0) {\n        arr = JSON.parse(JSON.stringify(gameState.gameArray)) \n        createRightPositions(gameState.size)\n    }\n    try{\n        console.log(`>>>>> flatArr[${_cursor}]=${flatArr[_cursor].tile} <<<<<`)\n        const obj = flatArr[_cursor]\n        let [cI, cJ] = findTile(obj.tile)\n        let [nI, nJ] = findTile(flatArr[_cursor+1].tile)\n        let [_I, _J] = findGap()\n        if(obj.$I == cI && obj.$J == cJ) {\n            console.log('NICEEEE!!!')\n        } else if(finalArr[cI][cJ] == arr[cI][cJ]\n               && finalArr[nI][nJ] == arr[nI][nJ]\n               && ((cI == arr.length - 1) || (cJ == arr.length - 1))\n                ) {\n            console.log('DOUBLE NICEEEE!!!')\n            _cursor++\n        } else {\n            if(obj.dir == 0) {\n                moveGapHoleHor(_J - cJ) //A 1 b\n                moveGapHoleVer(_I - cI) //A 1 a\n                moveToVer(obj) // A 2 a\n                moveToHor(obj) // A 2 b\n                moveToTop(1, obj)\n                makeSteps();\n            }\n            if(obj.dir == 1) {\n                moveGapHoleVer(_I - cI) //A 1 a\n                moveGapHoleHor(_J - cJ) //A 1 b\n                moveToHor(obj) // A 2 a\n                moveToVer(obj) // A 2 b\n                moveToLeft(1, obj)\n                makeSteps();\n            }\n            makeSteps();\n        }\n        console.log(`${flatArr[_cursor + 1].tile} == ${arr[obj.$I][obj.$J+1]}`)\n        if(obj.$J == arr.length - 2 && \n            flatArr[_cursor + 1].tile == arr[obj.$I][obj.$J+1]\n        ) {\n            console.log(\"newActive horizontal\")\n            let aJ = arr.length - 2\n            let aI = flatArr[_cursor + 1].$I + 1\n            let [_I, _J] = findGap()\n            moveGapHoleHor(_J - aJ)\n            moveGapHoleVer(_I - aI)\n            let newActive = [LEFT,BOTTOM,RIGHT,TOP,TOP,LEFT,BOTTOM,RIGHT,BOTTOM,LEFT,TOP]\n            actions = actions.concat(newActive)\n            actionsLocal = actionsLocal.concat(newActive)\n            makeSteps();\n        }\n        \n        console.log(`${flatArr[_cursor + 1].tile} == ${arr[obj.$I+1][obj.$J]}`)\n        if(obj.$I == arr.length - 2 && \n            flatArr[_cursor + 1].tile == arr[obj.$I+1][obj.$J]\n        ) {\n            console.log(\"newActive vertical\")\n            let newActive = [TOP,RIGHT,BOTTOM,LEFT,LEFT,TOP,RIGHT,BOTTOM,RIGHT,TOP,LEFT]\n            actions = actions.concat(newActive)\n            actionsLocal = actionsLocal.concat(newActive)\n            makeSteps();\n        }\n        countsIsFinish = true\n    } catch(e) {\n        console.error(e.message)\n    }\n}\nfunction solStart() {\n    //перебор массива правильных позиций в порядке сбора\n    //qwerty\n    for(_cursor = 0; _cursor < flatArr.length - 3 || _cursor == 0; _cursor++){\n        solStartMini()\n    }\n    finalSteps()\n    countsIsFinish = true\n}\ndocument.querySelector('.time-tittle').onclick = () => finalSteps()\nfunction finalSteps() {\n    let size = gameState.size\n    let saveCout = 0\n    while(saveCout != 20) {\n        let comand = ''\n        if(arr[size-2][size-2] == 0) comand = LEFT\n        if(arr[size-2][size-1] == 0) comand = TOP\n        if(arr[size-1][size-2] == 0) comand = BOTTOM\n        if(arr[size-1][size-1] == 0) comand = RIGHT\n        if(comand != '') {\n            actionsLocal.push(comand)\n            actions.push(comand)\n            makeSteps()\n        }\n        if( (arr[size-2][size-2] == size * size - size - 1) &&\n            (arr[size-2][size-1] == size * size - size) &&\n            (arr[size-1][size-2] == size * size - 1) &&\n            (arr[size-1][size-1] == 0)\n        ) {\n            console.log(\"HORAY!!!\")\n            break\n        }\n        saveCout++\n    }\n}\nfunction makeSteps() { //In local Array\n    while(actionsLocal.length > 0) {\n        let [_I, _J] = findGap()\n        let comand = actionsLocal.shift()\n        if(comand == TOP) {\n            if(_I >= arr.length - 1) throw new Error('Выход за пределы игрового поля: ' + TOP)\n            arr[_I][_J] = arr[_I+1][_J]\n            arr[_I+1][_J] = 0\n        }\n        if(comand == BOTTOM) {\n            if(_I <= 0) throw new Error(`Выход за пределы игрового поля _I=${_I} <= : ` + BOTTOM)\n            arr[_I][_J] = arr[_I-1][_J]\n            arr[_I-1][_J] = 0\n        }\n        if(comand == LEFT) {\n            if(_J > arr.length) throw new Error('Выход за пределы игрового поля: ' + RIGHT)\n            arr[_I][_J] = arr[_I][_J+1]\n            arr[_I][_J+1] = 0\n        }\n        if(comand == RIGHT) {\n            if(_J <= 0) throw new Error('Выход за пределы игрового поля: ' + LEFT)\n            arr[_I][_J] = arr[_I][_J-1]\n            arr[_I][_J-1] = 0\n        }\n    }\n}\n//SOL MOVED\nfunction moveGapHoleVer(steps) {\n    if(steps < 0) {\n        for(let i = 0; i < Math.abs(steps); i++) {\n            actions.push(TOP)\n            actionsLocal.push(TOP)\n        }\n    }\n    if(steps > 0) {\n        for(let i = 0; i < Math.abs(steps); i++) {\n            actions.push(BOTTOM)\n            actionsLocal.push(BOTTOM)\n        }\n    }\n    makeSteps()\n}\nfunction moveGapHoleHor(steps) {\n    if(steps < 0) {\n        for(let i = 0; i < Math.abs(steps); i++) {\n            actions.push(LEFT)\n            actionsLocal.push(LEFT)\n        }\n    }\n    if(steps > 0) {\n        for(let i = 0; i < Math.abs(steps); i++) {\n            actions.push(RIGHT)\n            actionsLocal.push(RIGHT)\n        }\n    }\n    makeSteps()\n}\n//Horizont\nfunction moveToVer(obj) {\n    let [cI, cJ] = findTile(obj.tile)\n    let [_I, _J] = findGap()\n    let dir = obj.dir\n    let $I = dir == 0 ? obj.$I + 1 : obj.$I\n    let $J = dir == 1 ? obj.$J + 1 : obj.$J\n    let steps = cI - $I\n    if(steps > 0) moveToTop(steps, obj)\n    if(steps < 0) moveToBottom(Math.abs(steps), obj)\n}\nfunction moveToTop(steps, obj) {\n    while (steps > 0) {\n        let [cI, cJ] = findTile(obj.tile)\n        let [_I, _J] = findGap()\n        const gPos = getGapPos(_I, _J, cI, cJ)\n        let newAction = []\n        if(gPos == GAP_LEFT && cI != arr.length -1 && cJ != arr.length -1 ) {\n            newAction = [TOP,LEFT,LEFT,BOTTOM,BOTTOM,RIGHT,TOP]\n        }\n        if(gPos == GAP_LEFT && (cI == arr.length - 1 || cJ == arr.length - 1) ) { //!!!\n            if(_cursor == 14) console.log('GAP_LEFT !!!')\n            newAction = [BOTTOM,LEFT,TOP]\n        }\n        if(gPos == GAP_BOTTOM && cJ != arr.length - 1) {\n            newAction = [LEFT,BOTTOM,BOTTOM,RIGHT,TOP]\n        }\n        if(gPos == GAP_BOTTOM && cJ == arr.length - 1) { //!!!\n            newAction = [RIGHT,BOTTOM,BOTTOM,LEFT,TOP]\n        }\n        if(gPos == GAP_RIGHT) {\n            newAction = [BOTTOM,RIGHT,TOP]\n        }\n        if(gPos == GAP_TOP) {\n            newAction = [TOP]\n        }\n        actions = actions.concat(newAction)\n        actionsLocal = actionsLocal.concat(newAction)\n        steps -= 1\n        makeSteps()\n    }\n}\nfunction moveToBottom(steps, obj) {\n    // throw new Error('moveToBottom are not implemented yet!')\n    while (steps > 0) {\n        let [cI, cJ] = findTile(obj.tile)\n        let [_I, _J] = findGap()\n        const gPos = getGapPos(_I, _J, cI, cJ)\n        let newAction = []\n        if(gPos == GAP_LEFT) {\n            newAction = [TOP,LEFT,BOTTOM]\n        }\n        if(gPos == GAP_BOTTOM) {\n            newAction = [BOTTOM]\n        }\n        if(gPos == GAP_RIGHT) {\n            newAction = [TOP,RIGHT,BOTTOM]\n        }\n        if(gPos == GAP_TOP && cJ != arr.length - 1) {\n            newAction = [LEFT,TOP,TOP,RIGHT,BOTTOM]\n        }\n        if(gPos == GAP_TOP && cJ == arr.length - 1) { // !!!\n            newAction = [RIGHT,TOP,TOP,LEFT,BOTTOM]\n        }\n        actions = actions.concat(newAction)\n        actionsLocal = actionsLocal.concat(newAction)\n        steps -= 1\n        makeSteps()\n    }\n}\n//Vertical\nfunction moveToHor(obj) {\n    let [cI, cJ] = findTile(obj.tile)\n    let [_I, _J] = findGap()\n    let dir = obj.dir\n    let $I = dir == 0 ? obj.$I + 1 : obj.$I\n    let $J = dir == 1 ? obj.$J + 1 : obj.$J\n    let steps = cJ - $J\n    if(steps > 0) moveToLeft(steps, obj)\n    if(steps < 0) moveToRight(Math.abs(steps), obj)\n}\nfunction moveToLeft(steps, obj) {\n    while (steps > 0) {\n        let [cI, cJ] = findTile(obj.tile)\n        let [_I, _J] = findGap()\n        const gPos = getGapPos(_I, _J, cI, cJ)\n        let newAction = []\n        if(gPos == GAP_TOP && obj.tile == 21) console.log(`gPos == GAP_TOP == ${gPos == GAP_TOP}`)\n        if(gPos == GAP_TOP && cI != arr.length - 1 &&  cJ != arr.length - 1) {\n            if(obj.tile == 21) console.log(`GAP_TOP 1`)\n            newAction = [LEFT,TOP,TOP,RIGHT,RIGHT,BOTTOM,LEFT]\n        }\n        if(gPos == GAP_TOP && cI == arr.length - 1) { //!!!\n            if(obj.tile == 21) console.log(`GAP_TOP 2`)\n            newAction = [RIGHT,TOP,LEFT]\n        }\n        if(gPos == GAP_TOP && cJ == arr.length - 1) { //!!!\n            if(obj.tile == 21) console.log(`GAP_TOP 3`)\n            newAction = [RIGHT,TOP,LEFT]\n        }\n        if(gPos == GAP_RIGHT && cI != arr.length - 1) {\n            if(obj.tile == 21) console.log(`GAP_RIGHT 1`)\n            newAction = [TOP,RIGHT,RIGHT,BOTTOM,LEFT]\n        }\n        if(gPos == GAP_RIGHT && cI == arr.length - 1) { //!!!\n            if(obj.tile == 21) console.log(`GAP_RIGHT 2`)\n            newAction = [BOTTOM,RIGHT,RIGHT,TOP,LEFT]\n        }\n        if(gPos == GAP_BOTTOM) {\n            if(obj.tile == 21) console.log(`GAP_BOTTOM`)\n            newAction = [RIGHT,BOTTOM,LEFT]\n        }\n        if(gPos == GAP_LEFT) {\n            if(obj.tile == 21) console.log(`GAP_LEFT`)\n            newAction = [LEFT]\n        }\n        actions = actions.concat(newAction)\n        actionsLocal = actionsLocal.concat(newAction)\n        steps -= 1\n        makeSteps()\n    }\n}\nfunction moveToRight(steps, obj) {\n    while (steps > 0) {\n        let [cI, cJ] = findTile(obj.tile)\n        let [_I, _J] = findGap()\n        const gPos = getGapPos(_I, _J, cI, cJ)\n        let newAction = []\n        if(gPos == GAP_LEFT && cI != arr.length - 1) {\n            newAction = [TOP,LEFT,LEFT,BOTTOM,RIGHT]\n        }\n        if(gPos == GAP_LEFT && cI == arr.length - 1) { //!!!\n            newAction = [BOTTOM,LEFT,LEFT,TOP,RIGHT]\n        }\n        if(gPos == GAP_BOTTOM ) {\n            newAction = [LEFT,BOTTOM,RIGHT]\n        }\n        if(gPos == GAP_TOP) {\n            newAction = [LEFT,TOP,RIGHT]\n        }\n        if(gPos == GAP_RIGHT) {\n            newAction = [RIGHT]\n        }\n        \n        actions = actions.concat(newAction)\n        actionsLocal = actionsLocal.concat(newAction)\n        steps -= 1\n        makeSteps()\n    }\n}\n\n//solution additional\nfunction getGapPos(_I, _J, cI, cJ) {\n    if(_I == cI && ((_J - cJ) == 1)) return GAP_RIGHT\n    if(_I == cI && ((_J - cJ) == -1)) return GAP_LEFT\n    if(((_I - cI) == 1) && _J == cJ) return GAP_BOTTOM\n    if(((_I - cI) == -1) && _J == cJ) return GAP_TOP\n    throw new Error(`WRONG GAP POSITION: gapPos=[${_I}][${_J}] tilePos=[${cI}][${cJ}]`)\n}\nfunction createRightPositions(size) {\n    let arr = []\n    flatArr = []\n    for(let i = 0; i < size; i++) {\n        arr.push([])\n        for(let j = 0; j < size; j++) {\n            let num = i*size + j + 1\n            arr[i].push(num < size*size ? num : 0)\n        }\n    }\n    finalArr = arr\n    for(let i = 0; i < size - 1; i++) {\n        for(let j = i; j < size - 1; j++) {\n            const obj = {\n                tile: arr[i][j],\n                $I: i,\n                $J: j,\n                dir: 0\n            }\n            if(obj.$J == size - 2) {\n                const obj2 = {\n                    tile: arr[i][j+1],\n                    $I: i,\n                    $J: j,\n                    dir: 0\n                }\n                flatArr.push(obj2)\n            }\n            flatArr.push(obj)\n        }\n        for(let j = i+1; j < size - 1; j++) {\n            const obj = {\n                tile: arr[j][i],\n                $I: j,\n                $J: i,\n                dir: 1\n            }\n            if(obj.$I == size - 2) {\n                const obj2 = {\n                    tile: arr[j+1][i],\n                    $I: j,\n                    $J: i,\n                    dir: 1\n                }\n                flatArr.push(obj2)\n            }\n            flatArr.push(obj)\n        }\n    }\n    const obj = {\n        tile: arr[size-1][size-2],\n        $i: size-1,\n        $j: size-2,\n        dir: 1\n    }\n    flatArr.push(obj)\n}\nfunction findTile(num) {\n    for(let i = 0; i < arr.length; i++) {\n        for(let j = 0; j < arr[i].length; j++) {\n            if(arr[i][j] == num) return [i, j]\n        }\n    }\n    return [-1, -1]\n}\nfunction findGap() {\n    return findTile(0)\n}\n\nfunction strfy(arr) {\n    let str = ''\n    for(let i = 0; i < arr.length; i++) {\n        str += JSON.stringify(arr[i]) + '\\n'\n    }\n    return str\n}"],"names":[],"sourceRoot":""}